@inject UserService UserService

<div class="@_reservationStateStyle.TimeSlotContainerCustomization alert alert-heading text-dark d-flex flex-row justify-content-between p-0 my-2 mx-0" style="cursor: pointer" @onclick="() => Session.ToggleReservationsView()">
    <div class="d-flex flex-column px-1">
        <div class="row">
            <div class="col"><strong>@Session.StartTime</strong></div>
        </div>
        <div class="row mt-auto">
            <div class="col">@Session.EndTime</div>
        </div>
    </div>
    <div class="px-1">
        @if (Session.Available > 0)
        {
            <div class="text-center m-0 p-0"><span class="text-success small font-weight-bold font-italic">@Session.Available available</span></div>
        } else if (Session.Available < 0)
        {
            <div class="text-center m-0 p-0"><span class="text-danger small font-weight-bold font-italic">@(Math.Abs(Session.Available)) in queue</span></div>
        }
        @foreach (var userDescription in _userDescriptions)
        {
            <span class="bi-check text-success"></span><span>@userDescription</span><br>
        }
        @foreach (var userDescription in _userDescriptionsInQueue)
        {
            <span class="bi-hourglass small">@userDescription</span><br>
        }
    </div>
    <div><button class="h5 m-1 px-3 btn-timeslotinfo bi-chevron-up align-text-top bg-transparent"></button></div>
</div>

@code {
    
    [Parameter]
    public SessionBooking.SessionUiItem Session { get; set; }
    
    [Parameter]
    public string UserId { get; set; }

    private IEnumerable<string> _userDescriptions;
    
    private IEnumerable<string> _userDescriptionsInQueue;


    class ReservationStateStyle
    {
        public static ReservationStateStyle Create(ReservationStateSimplifier.UserSessionReservationState userState, ReservationStateSimplifier.SessionReservationState sessionState)
        {
            var containerStyle = "border";
            switch (userState)
            {
                case ReservationStateSimplifier.UserSessionReservationState.Joined:
                    containerStyle = "border-success";
                    break;
                case ReservationStateSimplifier.UserSessionReservationState.InQueue:
                    containerStyle = "border-warning";
                    break;
            }
            return new()
            {
                TimeSlotContainerCustomization = containerStyle
            };
        }
        public string TimeSlotContainerCustomization { get; init; }
    }

    private ReservationStateStyle _reservationStateStyle;


    protected override async Task OnParametersSetAsync()
    {
        var reservations = Session.Reservations.ToList();
        var users = (await UserService.GetUsersAsync(reservations)).ToList();
        _userDescriptions = users.Take(Session.Size);
        _userDescriptionsInQueue = users.Skip(Session.Size);
        var state = new ReservationStateSimplifier(reservations, Session.Size);
        _reservationStateStyle = ReservationStateStyle.Create(state.GetUserState(UserId), state.GetSessionState());
    }

    
}

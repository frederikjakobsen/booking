@inject BookingService _bookingService
@inject SpaceSchedule _spaceSchedule
@inject TeamService _teamService
@attribute [Authorize]
@implements IDisposable
@using System.Globalization
@using System.Threading
@using System.Collections.Concurrent

<h2>@Title</h2>


@if (_sessions == null)
{
<p>Loading sessions..</p>
}
else
{
<table style="min-width:400px;">
    <tr>
        <th colspan="4" class="text-center">@Date.ToString("MMMM", CultureInfo.InvariantCulture)</th>
    </tr>
    <tr>
        <th>@if (_previousDayUrl != null)
                {<a href="@_previousDayUrl">earlier</a>}
                else
                {<span class="text-muted">earlier</span>}</th>
        <th colspan="2" class="text-center">@Date.Day</th>
        <th class="text-right"><a href="@_nextDayUrl">later</a></th>
    </tr>
    <tr>
        <th colspan="4" class="text-center">@Date.DayOfWeek</th>
    </tr>

    @foreach (var session in _sessions)
        {
    <tr>
        <td>@session.StartTime</td>
        <td>@session.TeamName</td>
        <td class="text-center"><button @onclick="()=>ToggleReservationsViewFor(session)">@session.Available/@session.Size</button></td>
        <td><button disabled=@session.Disabled @onclick="()=>session.ToggleBookingState()">@session.BookingStateToggleText</button></td>
    </tr>
    @if (session.Equals(_selectedSession))
            {
    <tr>
        <td colspan="4"><SessionInfo UserIds=session.Reservations Size=session.Size /></td>
    </tr>
    }
    }
</table>
}


@code {

        [Parameter]
        public string Title { get; set; }

        [Parameter]
        public ISessionCalendar Calendar { get; set; }

        [Parameter]
        public string SessionPath { get; set; }

    private string _nextDayUrl = null;
    private string _previousDayUrl = null;
    private List<UserReservation> _ownReservations = new();

    [Parameter]
    public DateTime Date { get; set; }

    private IEnumerable<SessionUiItem> _sessions = null;

    private SessionUiItem _selectedSession = null;
    private IEnumerable<ResolvedTeamSession> _sessionData;
    private List<BookedTimeSlot> _reservations;
    
    private SemaphoreSlim _processingLock = new(1,1);

    private void ToggleReservationsViewFor(SessionUiItem item)
    {
        if (item.Equals(_selectedSession))
            _selectedSession = null;
        else
            _selectedSession = item;
        StateHasChanged();
    }

    private delegate Task BookingStateToggler();

    class SessionUiItem
    {
        public int Available { get; set; }
        public int Size { get; set; }
        public bool Disabled {get;set;} = false;
        public IEnumerable<string> Reservations;
        public string StartTime { get; set; }
        public string TeamName;
        public BookingStateToggler ToggleBookingState;
        public string BookingStateToggleText { get; set; }
        public const string BookingStateOnText = "Cancel booking";
        public const string BookingStateOffText = "Book";
        public Object Generator;

        public bool Equals(SessionUiItem session)
        {
            return (session != null && session.TeamName == TeamName && session.StartTime == StartTime);
        }
    }


    private static DateTime RoundToDays(DateTime date)
    {
        return new(date.Year, date.Month, date.Day, 0, 0, 0, date.Kind);
    }

    private DateTime SanitizeSessionDate(DateTime date)
    {
        var res = RoundToDays(date);
        if (res < DateTime.Today)
            res = DateTime.Today;
        return res;
    }

    private void UpdateSessionReservations()
    {
        _sessions = _sessionData.Where(e => e.TimeSlot.StartTime +e.TimeSlot.Duration >= DateTime.Now).Select(e =>
        {
            var reservationsForSession = GetReservationsForSession(_reservations, e.ToSession()).ToList();
            var isBooked = _ownReservations.Any(o => o.StartTime == e.TimeSlot.StartTime && o.TeamId == e.team.Id);


            var res = new SessionUiItem
            {
                Available = e.SizeLimit - reservationsForSession.Count(),
                StartTime = e.TimeSlot.StartTime.ToString("HH:mm", CultureInfo.InvariantCulture),
                BookingStateToggleText = isBooked ? SessionUiItem.BookingStateOnText : SessionUiItem.BookingStateOffText,
                Reservations = reservationsForSession,
                Size = e.SizeLimit,
                Generator = e,
                TeamName = e.team.Name
            };
            if (!isBooked && e.team.Limits.TryGetValue(TeamLimit.ActiveBookings, out var maxActiveBookings))
            {
                res.Disabled = _ownReservations.Count(reservation => reservation.StartTime > DateTime.Now && reservation.TeamId == e.team.Id) >= maxActiveBookings;
            }
            
            res.ToggleBookingState = async () =>
            {
                await Book(e.ToSession());
                
            };
            if (isBooked)
                res.ToggleBookingState = async () =>
                {
                    await CancelBooking(e.ToSession());
                };

            return res;
        }).ToList();
    }

    protected override async Task OnParametersSetAsync()
    {
        _selectedSession = null;
        var sessionNavigator = new SessionNavigator(Calendar, SessionPath);
        var sessionResolver = new SessionResolver(_spaceSchedule, _teamService);

        var sessionsForDate =  Calendar.DailySessions(SanitizeSessionDate(Date)).ToList();
        Date = RoundToDays(sessionsForDate.First().StartTime);

        _nextDayUrl = sessionNavigator.GetNextSessionDayUrl(Date);
        _previousDayUrl = sessionNavigator.GetPreviousSessionDayUrl(Date);

        _sessionData = sessionResolver.ResolveSessions(sessionsForDate).ToList();
        _reservations = await _bookingService.GetAllReservations(Date, TimeSpan.FromDays(1));
        _ownReservations = await _bookingService.GetLoggedOnUserReservationsFrom(_reservations);
        UpdateSessionReservations();
    }


    protected override Task OnInitializedAsync()
    {
        BookingService.OnBookingsChanged += BookingsChanged;
        return Task.CompletedTask;
    }


    private IEnumerable<string> GetReservationsForSession(List<BookedTimeSlot> reservations, TeamSession session)
    {
        var res = reservations.Where(reservation => reservation.StartTime == session.StartTime).ToList();
        if (!res.Any()) return Enumerable.Empty<string>();
        var teamReservations = res.Select(e => e.TeamReservations).Single();
        if (teamReservations.TryGetValue(session.TeamId, out var reservationsForTeam))
        {
            return reservationsForTeam;
        }
        return Enumerable.Empty<string>();
    }

    private async Task Book(TeamSession sessionToBook)
    {
        await _processingLock.WaitAsync();
        try
        {
            if (!_ownReservations.Any(o => o.StartTime == sessionToBook.StartTime && o.TeamId == sessionToBook.TeamId))
                await _bookingService.MakeTeamReservation(sessionToBook);
        }
        finally
        {
            _processingLock.Release();
        }
    }

    private async Task CancelBooking(TeamSession sessionToBook)
    {
        await _processingLock.WaitAsync();
        try
        {
            if (_ownReservations.Any(o => o.StartTime == sessionToBook.StartTime && o.TeamId == sessionToBook.TeamId))
                await _bookingService.CancelTeamReservation(sessionToBook);
        }
        finally
        {
            _processingLock.Release();
        }
    }

    private async void BookingsChanged()
    {
        _reservations = await _bookingService.GetAllReservations(Date, TimeSpan.FromDays(1));
        _ownReservations = (await _bookingService.GetLoggedOnUserReservationsFrom(_reservations)).ToList();
        UpdateSessionReservations();
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        BookingService.OnBookingsChanged -= BookingsChanged;
    }

}

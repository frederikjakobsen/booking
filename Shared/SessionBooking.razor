@inject BookingService _bookingService
@inject SpaceSchedule _spaceSchedule
@inject TeamService _teamService
@attribute [Authorize]
@implements IDisposable
@using System.Globalization
@using System.Threading
@using System.Collections.Concurrent

@if (_sessions == null)
{
<p>Loading sessions..</p>
}
else
{
    @foreach (var session in _sessions)
    {
        if (session.Equals(_selectedSession))
        {
            <SessionCalendarTimeSlotReservations Session="@session" UserId="@_ownUserId"/>
        }
        else
        {
            <SessionCalendarTimeSlot Session="@session" UserId="@_ownUserId"/>
        }
    }
}


@code {

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public ISessionCalendar Calendar { get; set; }

    [Parameter]
    public string SessionPath { get; set; }

    private List<UserReservation> _ownReservations = new();
    private string _ownUserId;

    [Parameter]
    public DateTime Date { get; set; }

    private IEnumerable<SessionUiItem> _sessions = null;

    private SessionUiItem _selectedSession = null;
    private IEnumerable<ResolvedTeamSession> _sessionData;
    private List<BookedTimeSlot> _reservations;
    
    private SemaphoreSlim _processingLock = new(1,1);

    private void ToggleReservationsViewFor(SessionUiItem item)
    {
        if (item.Equals(_selectedSession))
            _selectedSession = null;
        else
            _selectedSession = item;
        StateHasChanged();
    }

    private void DeselectSession()
    {
        _selectedSession = null;
    }

    public delegate Task BookingStateToggler();
    public delegate void ReservationsViewToggler(SessionUiItem item);

    public class SessionUiItem
    {
        public int Available { get; set; }
        public int Size { get; set; }
        public bool Disabled { get; set; }
        public IEnumerable<string> Reservations;
        public string StartTime { get; set; }
        public string EndTime { get; set; }
        public string TeamName;
        public BookingStateToggler ToggleBookingState;
        public bool IsBooked { get; set; }
        public string BookingStateToggleText { get; set; }
        public const string BookingStateOnText = "Cancel booking";
        public const string BookingStateOffText = "Book";

        public ReservationsViewToggler ReservationsViewToggler { get; init; }

        public bool Equals(SessionUiItem session)
        {
            return (session != null && session.TeamName == TeamName && session.StartTime == StartTime);
        }

        public void ToggleReservationsView()
        {
            ReservationsViewToggler(this);
        }
    }


    private static DateTime RoundToDays(DateTime date)
    {
        return new(date.Year, date.Month, date.Day, 0, 0, 0, date.Kind);
    }

    private DateTime SanitizeSessionDate(DateTime date)
    {
        var res = RoundToDays(date);
        if (res < DateTime.Today)
            res = DateTime.Today;
        return res;
    }

    private void UpdateSessionReservations()
    {
        _sessions = _sessionData.Where(e => e.TimeSlot.StartTime +e.TimeSlot.Duration >= DateTime.Now).Select(e =>
        {
            var reservationsForSession = GetReservationsForSession(_reservations, e.ToSession()).ToList();
            var isBooked = _ownReservations.Any(o => o.StartTime == e.TimeSlot.StartTime && o.TeamId == e.team.Id);


            var res = new SessionUiItem
            {
                Available = e.SizeLimit - reservationsForSession.Count(),
                StartTime = e.TimeSlot.StartTime.ToString("HH:mm", CultureInfo.InvariantCulture),
                EndTime = (e.TimeSlot.StartTime + e.TimeSlot.Duration).ToString("HH:mm", CultureInfo.InvariantCulture),
                BookingStateToggleText = isBooked ? SessionUiItem.BookingStateOnText : SessionUiItem.BookingStateOffText,
                IsBooked = isBooked,
                ReservationsViewToggler = ToggleReservationsViewFor,
                Reservations = reservationsForSession,
                Size = e.SizeLimit,
                TeamName = e.team.Name
            };
            if (!isBooked && e.team.Limits.TryGetValue(TeamLimit.ActiveBookings, out var maxActiveBookings))
            {
                res.Disabled = _ownReservations.Count(reservation => reservation.StartTime > DateTime.Now && reservation.TeamId == e.team.Id) >= maxActiveBookings;
            }
            
            res.ToggleBookingState = async () =>
            {
                await Book(e.ToSession());
            };
            if (isBooked)
                res.ToggleBookingState = async () =>
                {
                    await CancelBooking(e.ToSession());
                };

            if (res.Equals(_selectedSession) && !res.Reservations.Any())
            {
                DeselectSession();
            }
            return res;
        }).ToList();
    }

    protected override async Task OnParametersSetAsync()
    {
        _selectedSession = null;
        var sessionResolver = new SessionResolver(_spaceSchedule, _teamService);

        var sessionsForDate =  Calendar.DailySessions(SanitizeSessionDate(Date)).ToList();
        Date = RoundToDays(sessionsForDate.First().StartTime);

        _sessionData = sessionResolver.ResolveSessions(sessionsForDate).ToList();
        _reservations = await _bookingService.GetAllReservations(Date, TimeSpan.FromDays(1));
        _ownReservations = await _bookingService.GetLoggedOnUserReservations();
        UpdateSessionReservations();
    }


    protected override async Task OnInitializedAsync()
    {
        _ownUserId = await _bookingService.GetLoggedOnUserId();
        BookingService.OnBookingsChanged += BookingsChanged;
    }


    private IEnumerable<string> GetReservationsForSession(List<BookedTimeSlot> reservations, TeamSession session)
    {
        var res = reservations.Where(reservation => reservation.StartTime == session.StartTime).ToList();
        if (!res.Any()) return Enumerable.Empty<string>();
        var teamReservations = res.Select(e => e.TeamReservations).Single();
        if (teamReservations.TryGetValue(session.TeamId, out var reservationsForTeam))
        {
            return reservationsForTeam;
        }
        return Enumerable.Empty<string>();
    }

    private async Task Book(TeamSession sessionToBook)
    {
        await _processingLock.WaitAsync();
        try
        {
            if (!_ownReservations.Any(o => o.StartTime == sessionToBook.StartTime && o.TeamId == sessionToBook.TeamId))
                await _bookingService.MakeTeamReservation(sessionToBook);
        }
        finally
        {
            _processingLock.Release();
        }
    }

    private async Task CancelBooking(TeamSession sessionToBook)
    {
        await _processingLock.WaitAsync();
        try
        {
            if (_ownReservations.Any(o => o.StartTime == sessionToBook.StartTime && o.TeamId == sessionToBook.TeamId))
                await _bookingService.CancelTeamReservation(sessionToBook);
        }
        finally
        {
            _processingLock.Release();
        }
    }

    private async void BookingsChanged()
    {
        _reservations = await _bookingService.GetAllReservations(Date, TimeSpan.FromDays(1));
        _ownReservations = await _bookingService.GetLoggedOnUserReservations();
        UpdateSessionReservations();
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        BookingService.OnBookingsChanged -= BookingsChanged;
    }

}

@inject UserService UserService

@if (_userDescriptions.Any()) 
    {<text>Reservations:</text>}
else
    {<em>no reservations</em>}

<table>
@foreach (var userDescription in _userDescriptions)
{
    <tr>
        <td>@userDescription.UserName</td>
        <td>@userDescription.QueueStatus</td>
    </tr>
}
</table>

@code {
    [Parameter]
    public IEnumerable<string> UserIds { get; set; }

    [Parameter]
    public int Size { get; set; }

    private IEnumerable<UserReservationDescription> _userDescriptions;

    class UserReservationDescription
    {
        public string UserName { get; set; }
        public string QueueStatus { get; set; }
    }

    protected override async Task OnParametersSetAsync()
    {
        var users = (await UserService.GetUsersAsync(UserIds)).ToList();
        _userDescriptions = 
    users.Take(Size).Select(e=>new UserReservationDescription{UserName=e})
    .Concat(users.Skip(Size).Select(e=>new UserReservationDescription {UserName=e,QueueStatus="(queue)" }));;
    }

}

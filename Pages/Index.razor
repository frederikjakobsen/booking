@page "/"
@using System.Globalization
@inject BookingService _bookingService
@inject TeamService _teamService
@inject SpaceSchedule _spaceSchedule
@attribute [Authorize]

<div class="d-flex justify-content-start d-md-none mb-3">
    <div><a class="btn btn-primary btn-sm mr-1" href="/opensessions/">Book open sessions</a></div> 
    <div><a class="btn btn-info btn-sm mx-1" href="/teamsessions/">Book team sessions</a></div>
</div>

@if (_reservationDetails.Any())
{
    @foreach (var reservation in _reservationSections)
    {
        <a class="text-@reservation.Style" href=@reservation.SessionBookingPageUrl>@reservation.Date</a>
        <div class="d-flex flex-column px-0 py-0">
            <span class="badge small badge-@reservation.Style ">@reservation.Team</span>
        </div>

        <div class="alert alert-@reservation.Style d-flex flex-column px-2 py-1 mt-1">      
            @{
                for(int i =0; i<reservation.Entries.Count; i++)
                {
                    var entry = reservation.Entries[i];
                    <div class="d-flex flex-row justify-content-between align-items-center">
                        <div class="px-0">
                            @entry.StartTime - @entry.EndTime
                        </div>
                        <div class="px-0 text-danger font-weight-bold small">
                            @entry.QueueText
                        </div>
                        <button class="btn btn-@reservation.Style btn-sm" @onclick="() => CancelBooking(entry.Generator)">Cancel</button>
                    </div>
                    if (i != reservation.Entries.Count - 1)
                    {
                        <div><hr class="my-1 p-0"></div>
                    }
                }
            }
        </div>
    }
}
else
{
    <em>You have no active bookings</em>
}

@code
{

    class ReservationSection
    {
        public string SessionBookingPageUrl { get; init; }
        public string Team { get; init; }
        public string Style { get; init;}
        public string Date { get; init; }
        public List<ReservationEntry> Entries { get; init; }
    }
    
    class ReservationEntry
    {
        public string StartTime { get; init; }
        public string EndTime { get; init; }
        public string QueueText { get; set; }
        public OwnReservationUi Generator { get; init; }
    }
    
    class OwnReservationUi
    {
        public bool ShowHeader { get; set; }
        public string Style { get; init;}
        public string Date { get; init; }
        public string Team { get; init; }
        public string QueueText { get; set; }
        public string SessionBookingPageUrl { get; init; }
        public string StartTime { get; init; }
        public string EndTime { get; init; }
        public UserReservation Generator { get; init; }
    }

    private readonly List<ReservationSection> _reservationSections = new();
    
    private readonly List<OwnReservationUi> _reservationDetails = new();

    private int GetTeamSize(Team team, DateTime startTime)
    {
        if (team.Limits.TryGetValue(TeamLimit.Size, out var sizeLimit))
        {
            return sizeLimit;
        }
        return _spaceSchedule.GetFreeSpace(new TimeSlot { Duration = team.Duration, StartTime = startTime });
    }

    protected override async Task OnInitializedAsync()
    {
        
        var userReservations = (await _bookingService.GetLoggedOnUserReservations()).OrderBy(e => e.StartTime);
        
        foreach (var userres in userReservations)
        {
            var team = GetTeamForReservation(userres);
            if (userres.StartTime + team.Duration < DateTime.Now)
                continue;

            var userPosition = await _bookingService.GetLoggedOnUserPositionForReservedSession(userres);
            var details = new OwnReservationUi
            {
                Generator = userres,
                QueueText = "",
                SessionBookingPageUrl = CreateSessionBookingPageUrl(userres),
                Date = userres.StartTime.ToString("dddd, MMMM d", CultureInfo.InvariantCulture),
                StartTime = userres.StartTime.ToString("HH:mm", CultureInfo.InvariantCulture),
                EndTime = (userres.StartTime + team.Duration).ToString("HH:mm", CultureInfo.InvariantCulture),
                Team = team.Name,
                Style = team.Name == "Open"? "primary": "info",
            };

            
            var teamSize = GetTeamSize(team, userres.StartTime);
            if (userPosition >= teamSize)
            {
                var positionInQueue = userPosition - teamSize + 1;
                details.QueueText = $"In queue ({positionInQueue})";
            }
            _reservationDetails.Add(details);
        }
        OrganizeReservations();
    }

    private void OrganizeReservations()
    {
        _reservationSections.RemoveAll(e=>true);
        if (!_reservationDetails.Any())
            return;
        var first = _reservationDetails.First();
        var previousEndTime = first.EndTime;
        var previousTeam = first.Team;

        var currentSection = new ReservationSection
        {
            Date = first.Date,
            Entries = new()
            {
                new ()
                {
                    Generator = first,
                    StartTime = first.StartTime,
                    EndTime = first.EndTime,
                    QueueText = first.QueueText
                }
            },
            Style = first.Style,
            Team = first.Team,
            SessionBookingPageUrl = first.SessionBookingPageUrl
        };
        foreach (var details in _reservationDetails)
        {
            var isContinuation = (previousTeam == details.Team && previousEndTime == details.StartTime);
            if (isContinuation)
            {
                
                currentSection.Entries.Add(new ()
                {
                    Generator = details,
                    StartTime = details.StartTime,
                    EndTime = details.EndTime,
                    QueueText = first.QueueText
                });
            }
            else
            {
                currentSection = new()
                {
                    Date = details.Date,
                    Style = details.Style,
                    Team = details.Team,
                    SessionBookingPageUrl = details.SessionBookingPageUrl,
                    Entries = new()
                    {
                        new()
                        {
                            Generator = details,
                            StartTime = details.StartTime,
                            EndTime = details.EndTime,
                            QueueText = details.QueueText
                        }
                    }
                };
                _reservationSections.Add(currentSection);
            }
            
            details.ShowHeader = !isContinuation;
            previousTeam = details.Team;
            previousEndTime = details.EndTime;
            
        }
        
    }

    private Team GetTeamForReservation(UserReservation userReservation)
    {
        return _teamService.GetTeam(userReservation.TeamId);
    }

    private async Task CancelBooking(OwnReservationUi reservation)
    {
        await _bookingService.CancelUserReservation(reservation.Generator);
        _reservationDetails.Remove(reservation);
        OrganizeReservations();
    }

    private static string CreatePathWithDate(string path, DateTime date)
    {
        return $"/{path}/{date.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture)}";
    }

    private string CreateSessionBookingPageUrl(UserReservation reservation)
    {
        if (reservation.TeamId == "open")
            return CreatePathWithDate("opensessions", reservation.StartTime);
        return CreatePathWithDate("teamsessions", reservation.StartTime);

    }
}

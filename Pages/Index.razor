@page "/"
@using System.Globalization
@inject BookingService _bookingService
@inject TeamService _teamService
@inject SpaceSchedule _spaceSchedule
@attribute [Authorize]

<p>
    <a href="@_openSessionLink">Book open session</a>
</p>
<p>
    <a href="@_teamSessionLink">Book team session</a>
</p>

@if (_reservationDetails.Any())
{
<h3>Active bookings</h3>
<table>
    @foreach (var reservation in _reservationDetails)
        {
    <tr>
        <td>
            <a href=@reservation.SessionBookingPageUrl>@reservation.StartTime</a>
        </td>
        <td>
            @reservation.Team
        </td>
        <td>
            @reservation.QueueText
        </td>
        <td>
            <button @onclick="()=>CancelBooking(reservation)">Cancel booking</button>
        </td>
    </tr>
    }

</table>
}
else
{
<em>You have no active bookings</em>
}

@code
{
    private readonly string _openSessionLink = CreatePathWithDate("opensessions", DateTime.Today);
    private readonly string _teamSessionLink =  CreatePathWithDate("teamsessions", DateTime.Today);

    class OwnReservationUi
    {
        public string Team { get; init; }
        public string QueueText { get; set; }
        public string SessionBookingPageUrl { get; init; }
        public string StartTime { get; init; }
        public UserReservation Generator { get; init; }
    }

    private readonly List<OwnReservationUi> _reservationDetails = new();

    private int GetTeamSize(Team team, DateTime startTime)
    {
        if (team.Limits.TryGetValue(TeamLimit.Size, out var sizeLimit))
        {
            return sizeLimit;
        }
        return _spaceSchedule.GetFreeSpace(new TimeSlot { Duration = team.Duration, StartTime = startTime });
    }

    protected override async Task OnInitializedAsync()
    {
        
        var userReservations = (await _bookingService.GetLoggedOnUserReservations()).OrderBy(e => e.StartTime);
        foreach (var userres in userReservations)
        {
            var team = GetTeamForReservation(userres);
            if (userres.StartTime + team.Duration < DateTime.Now)
                continue;

            var userPosition = await _bookingService.GetLoggedOnUserPositionForReservedSession(userres);
            var details = new OwnReservationUi
            {
                Generator = userres,
                QueueText = "",
                SessionBookingPageUrl = CreateSessionBookingPageUrl(userres),
                StartTime = userres.StartTime.ToString("yyyy-MM-dd HH:mm", CultureInfo.InvariantCulture),
                Team = team.Name
            };
            var teamSize = GetTeamSize(team, userres.StartTime);
            if (userPosition >= teamSize)
            {
                var positionInQueue = userPosition - teamSize + 1;
                details.QueueText = $"In queue ({positionInQueue})";
            }
            _reservationDetails.Add(details);
        }
    }

    private Team GetTeamForReservation(UserReservation userReservation)
    {
        return _teamService.GetTeam(userReservation.TeamId);
    }

    private async Task CancelBooking(OwnReservationUi reservation)
    {
        await _bookingService.CancelUserReservation(reservation.Generator);

        _reservationDetails.Remove(reservation);
    }

    private static string CreatePathWithDate(string path, DateTime date)
    {
        return $"/{path}/{date.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture)}";
    }

    private string CreateSessionBookingPageUrl(UserReservation reservation)
    {
        if (reservation.TeamId == "open")
            return CreatePathWithDate("opensessions", reservation.StartTime);
        return CreatePathWithDate("teamsessions", reservation.StartTime);

    }
}

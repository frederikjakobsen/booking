@page "/usermanager"
@inject UserManagerService UserManagerService 
@attribute [Authorize(Roles = "approved")]

<h1>User Manager</h1>

@if (_users == null)
{
    <p>Loading users..</p>
} else
{
    <table>
        <tr>
            <th></th>
            <th></th>
        </tr>
  @foreach (var user in _users)
  {
      <tr>
            <td>@user.Name</td>
          <td>@user.Email</td>
          <td>@(user.EmailConfirmed ? "confirmed" : "" )</td>
          <td>
              
              @if (!user.Approved)
              {
                  <button @onclick="() => ApproveUser(user)">Approve</button>
              }
              else
              {
                  <text>Approved</text>
                  <button @onclick="() => RejectUser(user)">Reject</button>
              }

          </td>
                    <td>@if (!user.Approved)
                        {
                            <button @onclick="() => DeleteUser(user)">Delete</button>
                        }
                    </td>
        </tr>
  }
      </table>
}

@code {
    private IEnumerable<BookingUser> _users;

    private async Task ApproveUser(BookingUser user)
    {
        await UserManagerService.ApproveUser(user);
        user.Approved = true;
    }

    private async Task RejectUser(BookingUser user)
    {
        await UserManagerService.RejectUser(user);
        user.Approved = false;
    }
    
    private async Task DeleteUser(BookingUser user)
    {
        await UserManagerService.DeleteUser(user);
        _users = await UserManagerService.GetUsers();
    }

    protected override async Task OnInitializedAsync()
    {
        _users = await UserManagerService.GetUsers();
    }
}

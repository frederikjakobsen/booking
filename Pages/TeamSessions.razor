@page "/teamsessions/{Date:datetime}"
@inject BookingService BookingService
@inject TeamService TeamService
@inject NavigationManager NavigationManager
@attribute [Authorize]
@implements IDisposable
@using System.Globalization

<h2>Team session booking</h2>


@if (teamSessions == null)
{
<p>Loading sessions..</p>
}
else
{
<table style="min-width:400px;">
<tr>
    <th colspan="4" class="text-center">@Date.ToString("MMMM", CultureInfo.InvariantCulture)</th>
</tr>
<tr>
    <th>@if (previousDayUrl !=null) {<a href="@previousDayUrl">earlier</a>} else {<span class="text-muted">earlier</span>}</th>
    <th colspan="2" class="text-center">@Date.Day</th>
    <th class="text-right"><a href="@nextDayUrl">later</a></th>
</tr>
<tr>
    <th colspan="4" class="text-center">@Date.DayOfWeek</th>
</tr>

@foreach (var teamSession in teamSessions)
{
    if (teamSession.StartTime < DateTime.Now) {
        continue;
    }
        <tr>
        <td>@teamSession.StartTime.ToString("HH:mm", CultureInfo.InvariantCulture)</td>
        <td>@TeamService.GetTeam(teamSession.TeamId).Name</td>
        <td><center>@(TeamService.GetTeam(teamSession.TeamId).Size - GetReservations(teamSession).Count())</center></td>
        <td>@if (ownReservations.ContainsKey(teamSession.StartTime)) { <button @onclick="()=>CancelBooking(teamSession)">Cancel booking</button> } else { <button @onclick="()=>Book(teamSession)">Book</button> } </td>
    </tr>
}
</table>
}


@code {
    private string nextDayUrl = null;
    private string previousDayUrl = null;
    private Dictionary<DateTime, string> ownReservations = new Dictionary<DateTime, string>();
    private IEnumerable<BookedTimeSlot> reservations = null;
    private IEnumerable<TeamSession> teamSessions = Enumerable.Empty<TeamSession>();

    [Parameter]
    public DateTime Date { get; set; }

    private DateTime RoundToDays(DateTime date)
    {
        return new DateTime(date.Year, date.Month, date.Day, 0, 0, 0, date.Kind);
    }

    private async Task SetNextTeamSessionDate()
    {
        var teamsessiondate = Date;
        teamSessions = await BookingService.GetTeamSessions(Date, TimeSpan.FromDays(1));

        while(!teamSessions.Any())
        {
            teamsessiondate += TimeSpan.FromDays(1);
            teamSessions = await BookingService.GetTeamSessions(teamsessiondate, TimeSpan.FromDays(1));
        }
        Date = teamsessiondate;
    }

    private async Task<DateTime> GetPreviousTeamSessionDateBefore(DateTime date)
    {
        var teamsessiondate = date;

        while (true)
        {
            teamsessiondate -= TimeSpan.FromDays(1);
            if ((await BookingService.GetTeamSessions(teamsessiondate, TimeSpan.FromDays(1))).Any())
                return teamsessiondate;
        }
    }

    private async Task<DateTime> GetNextTeamSessionDateAfter(DateTime date)
    {
        var teamsessiondate = date;

        while (true)
        {
            teamsessiondate += TimeSpan.FromDays(1);
            if ((await BookingService.GetTeamSessions(teamsessiondate, TimeSpan.FromDays(1))).Any())
                return teamsessiondate;
        }
    }

    protected async override Task OnParametersSetAsync()
    {
        Date = RoundToDays(Date);
        var inputDate = Date;
        if (Date < DateTime.Today)
            Date = DateTime.Today;

        await SetNextTeamSessionDate();
        if(Date!=inputDate)
            NavigationManager.NavigateTo($"/teamsessions/{Date.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture)}", false);

        nextDayUrl = $"/teamsessions/{(await GetNextTeamSessionDateAfter(Date)).ToString("yyyy-MM-dd", CultureInfo.InvariantCulture)}";
        if (Date > DateTime.Today)
            previousDayUrl = $"/teamsessions/{(await GetPreviousTeamSessionDateBefore(inputDate)).ToString("yyyy-MM-dd", CultureInfo.InvariantCulture)}";
        else
            previousDayUrl = null;

        reservations = await BookingService.GetAllReservations(Date, TimeSpan.FromDays(1));

    }

    protected async override Task OnInitializedAsync()
    {
        var ownBookings = await BookingService.GetLoggedOnUserReservations();

        var ownTeamBookings = ownBookings.Where(e => e.TeamId != "open");
        foreach(var teamBooking in ownTeamBookings)
        {
            ownReservations.Add(teamBooking.StartTime, teamBooking.TeamId);
        }
        BookingService.OnBookingsChanged += this.BookingsChanged;
    }

    private IEnumerable<string> GetReservations(TeamSession session)
    {
        var res = reservations.Where(res => res.StartTime == session.StartTime);
        if (res.Any())
        {
            var teamReservations = res.Select(e => e.Reservations.TeamReservations).Single();
            HashSet<string> reservationsForTeam = null;
            if (teamReservations.TryGetValue(session.TeamId, out reservationsForTeam))
            {
                return reservationsForTeam;
            }
            return Enumerable.Empty<string>();
        }
        return Enumerable.Empty<string>();
    }

        private async Task Book(TeamSession sessionToBook)
    {
        await BookingService.MakeTeamReservation(sessionToBook);
        ownReservations[sessionToBook.StartTime] = sessionToBook.TeamId;
    }

    private async Task CancelBooking(TeamSession sessionToBook)
    {
        await BookingService.CancelTeamReservation(sessionToBook);
        ownReservations.Remove(sessionToBook.StartTime);
    }

    private async void BookingsChanged()
    {
        reservations = await BookingService.GetAllReservations(Date, TimeSpan.FromDays(1));
        await InvokeAsync(() => StateHasChanged());
    }

    public void Dispose()
    {
        BookingService.OnBookingsChanged -= this.BookingsChanged;
    }
    
}

@page "/booking"
@inject BookingService BookingService
@inject TeamService TeamService
@attribute [Authorize]
@implements IDisposable

<h1>Booking</h1>

@if (teamSlotsToday == null)
{
<p>Loading sessions..</p>
}
else
{
    <h2>Open sessions</h2>
<table>
<tr>
    <th>Time</th>
    <th>Available spots</th>
    <th></th>
</tr>

@foreach (var open in openSlotsToday)
{
    var visibilityClass = "";
    if (open.StartTime < DateTime.Now) {
        visibilityClass = "text-muted";
    }
        <tr class="@visibilityClass">
        <td>@open.StartTime</td>
        <td><center>@(open.Size - GetReservations(open).Count())/@(open.Size)</center></td>
        <td>@if (myOpenBookings.Contains(open.StartTime)) { <button @onclick="()=>CancelOpenBooking(open)">Cancel booking</button> } else { <button @onclick="()=>BookOpen(open)">Book</button> } </td>
    </tr>
}
</table>

}
@if (teamSlotsToday.Any())
{
    <h2>Team sessions</h2>
<table>
    <th>Time</th>
    <th>Team</th>
    <th>Available spots</th>
    <th></th>
@foreach (var team in teamSlotsToday)
{
    <tr>
        <td>@team.StartTime</td>
        <td>@TeamService.GetTeam(team.TeamId).Name</td>
        <td><center>@(TeamService.GetTeam(team.TeamId).Size - GetReservations(team).Count())</center></td>
        <td>@if (myTeamBookings.ContainsKey(team.StartTime) && myTeamBookings[team.StartTime] == team.TeamId) { <button @onclick="()=>CancelBooking(team)">Cancel booking</button> } else { <button @onclick="()=>Book(team)">Book</button> } </td>
    </tr>
}
</table>
 
}

@code {
    private Dictionary<string, Team> teams = new Dictionary<string, Team>();

    private Dictionary<DateTime, string> myTeamBookings = new Dictionary<DateTime, string>();
    private HashSet<DateTime> myOpenBookings = new HashSet<DateTime>();

    private IEnumerable<BookedTimeSlot> reservationsToday = null;
    private IEnumerable<OpenSession> openSlotsToday = null;
    private IEnumerable<TeamSession> teamSlotsToday = null;

    protected async override Task OnInitializedAsync()
    {
        var myBookings = await BookingService.GetLoggedOnUserReservations();
        
        var teamBookings = myBookings.Where(e => e.TeamId != "open");
        foreach(var teamBooking in teamBookings)
        {
            myTeamBookings.Add(teamBooking.StartTime, teamBooking.TeamId);
        }

        var openBookings = myBookings.Where(e => e.TeamId == "open");
        foreach(var openBooking in openBookings)
        {
            myOpenBookings.Add(openBooking.StartTime);
        }


        reservationsToday = await BookingService.GetAllReservations(DateTime.Today, TimeSpan.FromDays(1));
        openSlotsToday = await BookingService.GetOpenSessions(DateTime.Today, TimeSpan.FromDays(1));
        teamSlotsToday = await BookingService.GetTeamSessions(DateTime.Today, TimeSpan.FromDays(1));

        BookingService.OnBookingsChanged += this.BookingsChanged;

    }

    private IEnumerable<string> GetReservations(OpenSession session)
    {
        var res = reservationsToday.Where(res => res.StartTime == session.StartTime);
        if (res.Any())
        {
            return res.Select(e => e.Reservations.OpenReservations).Single();
        }
        return Enumerable.Empty<string>();
    }

    private IEnumerable<string> GetReservations(TeamSession session)
    {
        var res = reservationsToday.Where(res => res.StartTime == session.StartTime);
        if (res.Any())
        {
            var teamReservations = res.Select(e => e.Reservations.TeamReservations).Single();
            HashSet<string> reservationsForTeam = null;
            if (teamReservations.TryGetValue(session.TeamId, out reservationsForTeam))
            {
                return reservationsForTeam;
            }
            return Enumerable.Empty<string>();
        }
        return Enumerable.Empty<string>();
    }

    private async Task BookOpen(OpenSession sessionToBook)
    {
        await BookingService.MakeOpenReservation(sessionToBook);
        myOpenBookings.Add(sessionToBook.StartTime);
    }

    private async Task CancelOpenBooking(OpenSession sessionToBook)
    {
        await BookingService.CancelOpenReservation(sessionToBook);
        myOpenBookings.Remove(sessionToBook.StartTime);
    }

    private async Task Book(TeamSession sessionToBook)
    {
        await BookingService.MakeTeamReservation(sessionToBook);
        myTeamBookings[sessionToBook.StartTime] = sessionToBook.TeamId;
    }

    private async Task CancelBooking(TeamSession sessionToBook)
    {
        await BookingService.CancelTeamReservation(sessionToBook);
        myTeamBookings.Remove(sessionToBook.StartTime);
    }

    private async void BookingsChanged()
    {
        reservationsToday = await BookingService.GetAllReservations(DateTime.Today, TimeSpan.FromDays(1));
        await InvokeAsync(() => StateHasChanged());
    }

    public void Dispose()
    {
        BookingService.OnBookingsChanged -= this.BookingsChanged;
    }
    
}
